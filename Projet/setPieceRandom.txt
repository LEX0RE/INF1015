
void Board::setPieceRandom() {
	Piece* piece = nullptr;
	PieceColor color = black;
	Position position = {};
	for (int i : iter::range(32)) {
		position = {};
		position.x = (rand() % 8) + 'a';
		position.y = '8' - (rand() % 8);
		while (squareDict_[position]->havePiece()) {
			position.x = (rand() % 8) + 'a';
			position.y = '8' - (rand() % 8);
		}
		switch (i % 17) {
		case 0: case 1:
			piece = new Rook(color, position, squareDict_[position]);
			break;
		case 2: case 3:
			piece = new Knight(color, position, squareDict_[position]);
			break;
		case 4: case 5:
			piece = new Bishop(color, position, squareDict_[position]);
			break;
		case 6:
			piece = new Queen(color, position, squareDict_[position]);
			break;
		case 7:
			piece = new King(color, position, squareDict_[position]);
			break;
		default:
			piece = new Pawn(color, position, squareDict_[position]);
			break;
		}
		squareDict_[position]->setPiece(piece);
		pieceDict_[piece->getName()] = piece;
		if (i > 16)
			color = white;
		piece = nullptr;
	}
}


Chess::~Chess() {
	delete mainWidget_;
	//removeItem(mainWidget_);
	while (history_->count())
		delete history_->takeItem(0);
	delete board_;
	board_ = nullptr;
	delete history_;
	history_ = nullptr;
	delete mainLayout_;
	mainLayout_ = nullptr;
	mainWidget_ = nullptr;
}